
CREATE DATABASE `ruk`;

USE `ruk`;

-- EX 01 --------

CREATE TABLE `branches`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(30) NOT NULL
);

CREATE TABLE `employees`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(20) NOT NULL,
    `last_name` VARCHAR(20) NOT NULL,
    `salary` DECIMAL(10,2) NOT NULL,
    `started_on` DATE NOT NULL,
    `branch_id` INT NOT NULL,
    CONSTRAINT `fk_branches_emloyees`
    FOREIGN KEY (`branch_id`)
    REFERENCES `branches`(`id`)
);


CREATE TABLE `clients`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `full_name` VARCHAR(50) NOT NULL,
    `age` INT NOT NULL
);

CREATE TABLE `employees_clients`(
	`employee_id` INT,
    `client_id` INT,
    CONSTRAINT `fk_employee_client_employee`
    FOREIGN KEY (`employee_id`)
    REFERENCES `employees`(`id`),
    CONSTRAINT `fk_employee_client_client`
    FOREIGN KEY (`client_id`)
    REFERENCES `clients`(`id`)
);


CREATE TABLE `bank_accounts`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `account_number` VARCHAR(10) NOT NULL,
    `balance` DECIMAL(10,2) NOT NULL,
    `client_id` INT UNIQUE NOT NULL,
    CONSTRAINT `fk_client_bank_account`
    FOREIGN KEY (`client_id`)
    REFERENCES `clients`(`id`)
);

CREATE TABLE `cards`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `card_number` VARCHAR(19) NOT NULL,
    `card_status` VARCHAR(7) NOT NULL,
    `bank_account_id` INT NOT NULL,
    CONSTRAINT `fk_bank_account_card`
    FOREIGN KEY (`bank_account_id`)
    REFERENCES `bank_accounts`(`id`)
);

-- EX 02 --------

INSERT INTO `cards`(`card_number`, `card_status`, `bank_account_id`)
SELECT REVERSE(`full_name`), 'Active', `id` FROM `clients`
WHERE `id` BETWEEN 191 AND 200;


-- EX 03 ---------
UPDATE `employees_clients` AS e
SET e.`employee_id` = (SELECT `employee_id` FROM (SELECT * FROM `employees_clients`) AS ec
GROUP BY `employee_id`
ORDER BY COUNT(ec.`client_id`), ec.`employee_id`
LIMIT 1)
WHERE e.`employee_id` = e.`client_id`;

-- EX 03 ----------

UPDATE `employees_clients` AS ec
SET ec.`employee_id` = 10
WHERE ec.`employee_id` = ec.`client_id`;


-- EX 04---------

DELETE FROM `employees`
WHERE `id` = 101;

-- EX 05 ----------

SELECT `id` , `full_name` FROM `clients`
ORDER BY `id`;


-- EX 06 ---------

SELECT 
    `id`,
    CONCAT(`first_name`, ' ', `last_name`) AS `full_name`,
    CONCAT('$', `salary`) AS `salary`,
    `started_on`
FROM
    `employees`
WHERE
    `salary` > 100000
        AND `started_on` >= '2018-01-01'
ORDER BY `salary` DESC , `id`;


-- EX 07 --------

SELECT 
    cd.`id`,
    CONCAT(cd.`card_number`, ' : ', c.`full_name`) AS `card_token`
FROM
    `cards` AS cd
        JOIN
    `bank_accounts` AS ba ON cd.`bank_account_id` = ba.`id`
        JOIN
    `clients` AS c ON ba.`client_id` = c.`id`
ORDER BY cd.`id` DESC; 

-- EX 08 --------

SELECT 
    CONCAT(e.`first_name`, ' ', e.`last_name`) AS `name`,
    e.`started_on`,
    COUNT(ec.`employee_id`) AS `count_of_clients`
FROM
    `employees` AS e
        JOIN
    `employees_clients` AS ec ON e.`id` = ec.`employee_id`
GROUP BY ec.`employee_id`
ORDER BY `count_of_clients` DESC , ec.`employee_id`
LIMIT 5;


-- EX 09----------

SELECT 
    b.`name`, COUNT(cd.`card_status`) AS `count_of_cards`
FROM
    `branches` AS b
        LEFT JOIN
    `employees` AS e ON b.`id` = e.`branch_id`
        LEFT JOIN
    `employees_clients` AS ec ON e.`id` = ec.`employee_id`
        LEFT JOIN
    `clients` AS c ON ec.`client_id` = c.`id`
        LEFT JOIN
    `bank_accounts` AS ba ON c.`id` = ba.`client_id`
        LEFT JOIN
    `cards` AS cd ON ba.`id` = cd.`bank_account_id`
GROUP BY b.`name`
ORDER BY `count_of_cards` DESC , b.`name`;


-- EX 10 -----------

DELIMITER $$

CREATE FUNCTION udf_client_cards_count(full_names VARCHAR(30)) 
RETURNS INT
DETERMINISTIC

BEGIN
		RETURN (SELECT  COUNT(c.`full_name`) AS `cards`
FROM `clients` AS c
JOIN `bank_accounts` AS ba
ON c.`id` = ba.`client_id`
JOIN `cards` AS cd
ON ba.`id` = cd.`bank_account_id`
WHERE c.`full_name` = full_names
GROUP BY  c.`full_name`);


END $$

DELIMITER ;

SELECT c.`full_name`, udf_client_cards_count('Baxy David') AS `cards` FROM `clients` AS c
WHERE c.`full_name` = 'Baxy David';


-- EX 11 ----------

DELIMITER $$

CREATE PROCEDURE udp_clientinfo(full_names VARCHAR(30))

BEGIN
	SELECT c.`full_name`, c.`age`, ba.`account_number`, CONCAT('$',ba.`balance`) AS `balance`
FROM `clients` AS c
JOIN `bank_accounts` AS ba
ON c.`id` = ba.`client_id`
WHERE c.`full_name` = full_names;


END $$

DELIMITER ;

CALL udp_clientinfo('Hunter Wesgate');
