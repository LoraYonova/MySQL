-- EX 01---------

CREATE DATABASE `softuni_stores_system`;

USE `softuni_stores_system`;

CREATE TABLE `towns`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(20) NOT NULL
);

CREATE TABLE `addresses`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL,
    `town_id` INT NOT NULL,
    CONSTRAINT `fk_towns_addresses`
    FOREIGN KEY (`town_id`)
    REFERENCES `towns`(`id`)
);

CREATE TABLE `stores`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(20) NOT NULL,
    `rating` FLOAT NOT NULL,
    `has_parking` TINYINT(1),
    `address_id` INT NOT NULL,
    CONSTRAINT `fk_addresses_stores`
    FOREIGN KEY (`address_id`)
    REFERENCES `addresses`(`id`)
);

CREATE TABLE `employees`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(15) NOT NULL,
    `middle_name` CHAR(1),
    `last_name` VARCHAR(20) NOT NULL,
    `salary` DECIMAL(19,2) DEFAULT 0,
    `hire_date` DATE NOT NULL,
    `manager_id` INT,
    `store_id` INT NOT NULL,
    CONSTRAINT `fk_employees_managers`
    FOREIGN KEY (`manager_id`)
    REFERENCES `employees`(`id`),
    CONSTRAINT `fk_stores_emloyees`
    FOREIGN KEY (`store_id`)
    REFERENCES `stores`(`id`)
);

CREATE TABLE `categories`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL
);

CREATE TABLE `pictures`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `url` VARCHAR(100) NOT NULL,
    `added_on` DATETIME NOT NULL
);

CREATE TABLE `products`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL,
    `best_before` DATE,
    `price` DECIMAL(10,2) NOT NULL,
    `description` TEXT,
    `category_id` INT NOT NULL,
    `picture_id` INT NOT NULL,
    CONSTRAINT `fk_categories_products`
    FOREIGN KEY (`category_id`)
    REFERENCES `categories`(`id`),
    CONSTRAINT `fk_pictures_products`
    FOREIGN KEY (`picture_id`)
    REFERENCES `pictures`(`id`)
    
);


CREATE TABLE `products_stores`(
	`product_id` INT,
    `store_id` INT,
    CONSTRAINT `pk_product_store`
    PRIMARY KEY (`product_id`, `store_id`),
    CONSTRAINT `fk_product_store_store`
    FOREIGN KEY (`store_id`)
    REFERENCES `stores`(`id`),
    CONSTRAINT `fk_product_store_product`
    FOREIGN KEY (`product_id`)
    REFERENCES `products`(`id`)
);

 -- EX 02----------

INSERT INTO `products_stores` (`product_id`, `store_id`)
VALUES
(9,1),
(10,1),
(13,1),
(16,1),
(18,1);

-- EX 03---------

UPDATE `employees` AS e
JOIN `stores` AS s
ON e.`store_id` = s.`id`
SET `salary` = `salary` - 500, `manager_id` = 3
WHERE YEAR(e.`hire_date`) > 2003 AND e.`store_id` NOT IN (5, 14);

-- EX 04--------

DELETE FROM `employees`
WHERE `manager_id` IS NOT NULL AND `salary` > 6000;


-- EX 05-----------

SELECT `first_name`, `middle_name`, `last_name`, `salary`, `hire_date` FROM `employees`
ORDER BY `hire_date` DESC;

-- EX 06----------

SELECT pr.`name` AS `product_name`, 
pr.`price`, pr.`best_before`, 
CONCAT(LEFT(pr.`description`, 10),'...')  AS `short_description`,
 p.`url`
FROM `products` AS pr
JOIN `pictures` AS p
ON pr.`picture_id` = p.`id`
WHERE CHAR_LENGTH(`description`) > 100 
	 AND YEAR(p.`added_on`) < 2019 
     AND pr.`price` > 20
ORDER BY pr.`price` DESC;


-- EX 07----------

SELECT s.`name`, COUNT(pr.`id`) AS `product_count`, ROUND(AVG(`price`), 2) AS `avg` 
FROM `stores` AS s
LEFT JOIN `products_stores` AS ps
ON s.`id` = ps.`store_id`
LEFT JOIN `products` AS pr
ON ps.`product_id` = pr.`id`
GROUP BY `name`
ORDER BY `product_count` DESC, `avg` DESC, s.`id`;


-- EX 08------------

SELECT CONCAT(e.`first_name`, ' ', e.`last_name`) AS `Full_name`, 
 s.`name` AS `Store_name`, a.`name` AS `address`, e.`salary` 
FROM `employees` AS e
JOIN `stores` AS s
ON e.`store_id` = s.`id`
JOIN `addresses` AS a
ON s.`address_id` = a.`id`
WHERE e.`salary` < 4000 
	 AND a.`name` LIKE ('%5%') 
     AND CHAR_LENGTH(s.`name`) > 8
     AND RIGHT(`last_name`,1) = 'n';


-- EX 09-----------

SELECT * FROM `employees`;
SELECT REVERSE(s.`name`) AS `reversed_name`, 
CONCAT(UPPER(t.`name`), '-', a.`name` )AS `full_address`,
COUNT(e.`store_id`) AS `employees_count`
FROM `stores` AS s
JOIN `addresses` AS a
ON a.`id` = s.`address_id`
JOIN `towns` AS t
ON a.`town_id` = t.`id`
JOIN `employees` AS e
ON e.`store_id` = s.`id`
GROUP BY e.`store_id`
ORDER BY `full_address`;

-- EX 10------------

DELIMITER $$ 

CREATE FUNCTION udf_top_paid_employee_by_store(store_name VARCHAR(50))
RETURNS VARCHAR(100)
DETERMINISTIC
BEGIN
		RETURN (SELECT CONCAT(`first_name`, ' ', `middle_name`, '. ', `last_name`, ' works in store for ',
        YEAR('2020-10-18') - YEAR(e.`hire_date`), ' years') AS `full_info`
        FROM `employees` AS e
        JOIN `stores` AS s
        ON e.`store_id` = s.`id`
        WHERE s.`name` = store_name
        ORDER BY e.`salary` DESC
        LIMIT 1
        );

END $$

DELIMITER ;

SELECT udf_top_paid_employee_by_store('Keylex');


-- EX 11--------------

DELIMITER $$
CREATE PROCEDURE udp_update_product_price(address_name VARCHAR(50))
BEGIN 

	UPDATE `products` AS p
	JOIN `products_stores` AS ps
	ON p.`id` = ps.`product_id`
	JOIN `stores` AS s
	ON ps.`store_id` = s.`id`
	JOIN `addresses` AS a
	ON s.`address_id` = a.`id`
		SET p.`price` = IF (LEFT(a.`name`, 1) = '0', p.`price` + 100, p.`price` + 200)
        WHERE a.`name` = address_name;

END $$
DELIMITER ;

CALL udp_update_product_price('07 Armistice Parkway');