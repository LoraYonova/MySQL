-- EX 01 ---------

CREATE DATABASE `insta_influencers`;

USE `insta_influencers`;

CREATE TABLE `users`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `username` VARCHAR(30) NOT NULL,
    `password` VARCHAR(30) NOT NULL,
    `email` VARCHAR(50) NOT NULL,
    `gender` CHAR(1) NOT NULL,
    `age` INT NOT NULL,
    `job_title` VARCHAR(40) NOT NULL,
    `ip` VARCHAR(30) NOT NULL
    
);

CREATE TABLE `addresses`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `address` VARCHAR(30) NOT NULL,
    `town` VARCHAR(30) NOT NULL,
    `country` VARCHAR(30) NOT NULL,
    `user_id` INT NOT NULL,
    CONSTRAINT `fk_users_addresses`
    FOREIGN KEY (`user_id`)
    REFERENCES `users`(`id`)
);


CREATE TABLE `photos`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `description` TEXT NOT NULL,
    `date` DATETIME NOT NULL,
    `views` INT DEFAULT 0 NOT NULL
);

CREATE TABLE `comments`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `comment` VARCHAR(255) NOT NULL,
    `date` DATETIME NOT NULL,
    `photo_id` INT NOT NULL,
    CONSTRAINT `fk_photos_comments`
    FOREIGN KEY (`photo_id`)
    REFERENCES `photos`(`id`)
);

CREATE TABLE `likes`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `photo_id` INT,
    `user_id` INT,
    CONSTRAINT `fk_users_likes`
    FOREIGN KEY (`user_id`)
    REFERENCES `users`(`id`),
    CONSTRAINT `fk_photos_likes`
    FOREIGN KEY (`photo_id`)
    REFERENCES `photos`(`id`)
);

CREATE TABLE `users_photos`(
    `user_id` INT NOT NULL,
    `photo_id` INT NOT NULL,
    CONSTRAINT `fk_user_photo_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `users`(`id`),
    CONSTRAINT `fk_user_photo_photo`
    FOREIGN KEY (`photo_id`)
    REFERENCES `photos`(`id`)
);

-- EX 02 -------

INSERT INTO `addresses`(`address`, `town`, `country`, `user_id`)
SELECT `username`, `password`, `ip`, `age` FROM `users`
WHERE `gender` = 'M';


-- EX 03-------

UPDATE `addresses`
SET `country` = 
(CASE
 WHEN `country` LIKE ('B%') THEN 'Blocked'
 WHEN `country` LIKE ('T%') THEN 'Test'
 WHEN `country` LIKE ('P%') THEN 'In Progress'
ELSE `country`
END);


-- EX 04 --------

DELETE FROM `addresses`
WHERE `id` % 3 = 0;

-- EX 05 ---------

SELECT `username`, `gender`, `age` FROM `users`
ORDER BY `age` DESC, `username`;

-- EX 06 --------

SELECT p.`id`, p.`date`, `description`, COUNT(`photo_id`) AS `commentsCount`
FROM `photos` AS p
JOIN `comments` AS c
ON p.`id` = c.`photo_id`
GROUP BY `photo_id`
ORDER BY `commentsCount` DESC, p.`id`
LIMIT 5;

-- EX 07 ----------

SELECT CONCAT(us.`id`, ' ', us.`username`) AS `id_username`, us.`email`
FROM `users` AS us
JOIN `users_photos` AS up
ON us.`id` = up.`user_id`
WHERE up.`user_id` = up.`photo_id`
ORDER BY `user_id`;

-- EX 08 --------

SELECT p.`id`, COUNT(DISTINCT l.`id`) AS `likes_count`, 
			   COUNT(DISTINCT c.`id`) AS `comments_count`
FROM `photos` AS p
 LEFT JOIN `likes` AS l ON p.`id` = l.`photo_id`
 LEFT JOIN `comments` AS c ON c.`photo_id` = p.`id`
GROUP BY p.`id`
ORDER BY `likes_count` DESC, 
`comments_count` DESC,
p.`id`;


-- EX 09 ----------

SELECT CONCAT(LEFT(`description`, 30), '...') AS `summary`, `date`
FROM `photos` 
WHERE DAY(`date`) = '10'
ORDER BY `date` DESC;


-- EX 10 ----------

DELIMITER $$

CREATE FUNCTION udf_users_photos_count(user_name VARCHAR(30)) 
RETURNS INT
DETERMINISTIC

BEGIN
RETURN (SELECT COUNT(`user_id`) FROM `users` AS u
LEFT JOIN `users_photos` AS up
ON u.`id` = up.`user_id`
WHERE u.`username` = user_name
GROUP BY up.`user_id`);


END $$

DELIMITER ;

SELECT udf_users_photos_count('ssantryd') AS photosCount;


-- EX 11 -------------

DELIMITER $$

CREATE PROCEDURE udp_modify_user(address VARCHAR(30), town VARCHAR(30)) 
BEGIN
	UPDATE `users` AS u
	JOIN `addresses` AS a
    ON a.`user_id` = u.`id`
    SET `age` = `age` + 10
    WHERE a.`address` = address AND a.`town` = town;

END$$

DELIMITER ;

CALL udp_modify_user ('97 Valley Edge Parkway', 'Divin√≥polis');

SELECT u.username, u.email,u.gender,u.age,u.job_title FROM users AS u
WHERE u.username = 'eblagden21';



