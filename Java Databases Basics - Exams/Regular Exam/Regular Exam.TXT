-- EX 01 ----------

CREATE DATABASE `osed`;

USE `osed`;

CREATE TABLE `reviews`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `content` TEXT,
    `rating` DECIMAL(10,2) NOT NULL,
    `picture_url` VARCHAR(80) NOT NULL,
    `published_at` DATETIME NOT NULL
);

CREATE TABLE `brands`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) UNIQUE NOT NULL
);

CREATE TABLE `categories`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR (40) UNIQUE NOT NULL
);

CREATE TABLE `products`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR (40) NOT NULL,
    `price` DECIMAL(19,2) NOT NULL,
    `quantity_in_stock` INT,
    `description` TEXT,
    `brand_id` INT NOT NULL,
    `category_id` INT NOT NULL,
    `review_id` INT,
    CONSTRAINT `fk_brands_products`
    FOREIGN KEY (`brand_id`)
    REFERENCES `brands`(`id`),
    CONSTRAINT `fk_categories_brands`
    FOREIGN KEY (`category_id`)
    REFERENCES `categories`(`id`),
    CONSTRAINT `fk_reviews_products`
    FOREIGN KEY (`review_id`)
    REFERENCES `reviews`(`id`)
);


CREATE TABLE `customers`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(20) NOT NULL,
    `last_name` VARCHAR(20) NOT NULL,
    `phone` VARCHAR (30) UNIQUE NOT NULL,
    `address` VARCHAR (60) NOT NULL,
    `discount_card` BIT(1) DEFAULT FALSE NOT NULL
);

CREATE TABLE `orders`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `order_datetime` DATETIME NOT NULL,
    `customer_id` INT NOT NULL,
    CONSTRAINT `fk_customers_orders`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customers`(`id`)
);


CREATE TABLE `orders_products`(
	`order_id` INT,
    `product_id` INT,
    CONSTRAINT `fk_orders_products_orders`
    FOREIGN KEY (`order_id`)
    REFERENCES `orders`(`id`),
    CONSTRAINT `fk_orders_products_products`
    FOREIGN KEY (`product_id`)
    REFERENCES `products`(`id`)
);

-- EX 02 ---------

INSERT INTO `reviews`(`content`, `rating`, `picture_url`, `published_at`)
SELECT LEFT(`description`, 15), ROUND(`price` / 8, 2), REVERSE(`name`), '2010-10-10' FROM `products` AS p
WHERE p.`id` >= 5;

-- EX 03----------

UPDATE `products`
SET `quantity_in_stock` = `quantity_in_stock` - 5
WHERE `quantity_in_stock` BETWEEN 60 AND 70;

-- EX 04 ----------

DELETE FROM `customers`
WHERE `id` NOT IN (SELECT `customer_id` FROM `orders`);


-- EX 05 ----------

SELECT `id`, `name` FROM `categories`
ORDER BY `name` DESC;

-- EX 06 --------

SELECT p.`id`, b.`id` AS `brand_id`, p.`name`, p.`quantity_in_stock` FROM `products` AS p
JOIN `brands` AS b
ON p.`brand_id` = b.`id`
WHERE p.`price` > 1000 AND `quantity_in_stock` < 30
ORDER BY `quantity_in_stock`, p.`id`;

-- EX 07 ---------

SELECT * FROM `reviews` 
WHERE `content` LIKE 'My%' AND CHAR_LENGTH(`content`) > 61
ORDER BY `rating` DESC;

-- EX 08 -----

SELECT CONCAT(`first_name`, ' ', `last_name`) AS `full_name`, `address`, `order_datetime`
 FROM `customers` AS c
 JOIN `orders` AS o
 ON c.`id` = o.`customer_id`
 WHERE YEAR(`order_datetime`) <= 2018
 ORDER BY `full_name` DESC;


-- EX 09 ----------

SELECT COUNT(`category_id`) AS `items_count`, c.`name`, SUM(`quantity_in_stock`) AS `total_quantity`
FROM `products` AS p
JOIN `categories` AS c
ON p.`category_id` = c.`id`
GROUP BY `category_id`
ORDER BY `items_count` DESC, `total_quantity`
LIMIT 5;


-- 10 ------------

DELIMITER $$

CREATE FUNCTION udf_customer_products_count(name VARCHAR(30)) 
RETURNS INT 
DETERMINISTIC

BEGIN
RETURN (
SELECT COUNT(op.`order_id`) FROM `orders_products` AS op
JOIN `orders` AS o
ON op.`order_id` = o.`id`
JOIN `customers` AS c
ON o.`customer_id` = c.`id`
WHERE c.`first_name` = name
GROUP BY c.`id`
);
 

END $$

DELIMITER ;

SELECT c.first_name,c.last_name, udf_customer_products_count('Shirley') as `total_products` FROM customers c
WHERE c.first_name = 'Shirley';


-- 11 ---------

DELIMITER $$

CREATE PROCEDURE udp_reduce_price(category_name VARCHAR(50))

BEGIN 
UPDATE `products` AS p
JOIN `categories` AS c
ON p.`category_id` = c.`id`
JOIN `reviews` AS r
ON p.`review_id` = r.`id`
SET `price` = `price` - (`price` * 0.3)
WHERE r.`rating` < 4 AND c.`name` = category_name;

END $$

DELIMITER ;