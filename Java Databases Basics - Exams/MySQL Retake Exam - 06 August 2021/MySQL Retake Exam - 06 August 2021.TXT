-- EX 01 ----------

CREATE DATABASE `games`;

USE `games`;

CREATE TABLE `addresses`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL
);

CREATE TABLE `offices`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `workspace_capacity` INT NOT NULL,
    `website` VARCHAR(50),
    `address_id` INT NOT NULL,
    CONSTRAINT `fk_addresses_offices`
    FOREIGN KEY (`address_id`)
    REFERENCES `addresses`(`id`)
);

CREATE TABLE `employees`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(30) NOT NULL,
    `last_name` VARCHAR(30) NOT NULL,
    `age` INT NOT NULL,
    `salary` DECIMAl(10,2) NOT NULL,
    `job_title` VARCHAR(20) NOT NULL,
    `happiness_level` CHAR(1) NOT NULL
);


CREATE TABLE `teams`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(40) NOT NULL,
    `office_id` INT NOT NULL,
    `leader_id` INT UNIQUE NOT NULL,
    CONSTRAINT `fk_offices_teams`
    FOREIGN KEY (`office_id`)
    REFERENCES `offices`(`id`),
    CONSTRAINT `fk_employees_teams`
    FOREIGN KEY (`leader_id`)
    REFERENCES `employees`(`id`)
);

CREATE TABLE `games`(
	`id` INT PRIMARY KEY AUTO_INCREMENT,
    `name` VARCHAR(50) NOT NULL,
    `description` TEXT,
    `rating` FLOAT DEFAULT 5.5 NOT NULL,
    `budget` DECIMAL(10,2) NOT NULL,
    `release_date` DATE,
    `team_id` INT NOT NULL,
    CONSTRAINT `fk_teams_games`
    FOREIGN KEY (`team_id`)
    REFERENCES `teams`(`id`)
    );
    
    CREATE TABLE `categories`(
		`id` INT PRIMARY KEY AUTO_INCREMENT,
        `name` VARCHAR(10) NOT NULL
	);
    
    CREATE TABLE `games_categories`(
		`game_id` INT,
        `category_id` INT,
        CONSTRAINT `pk_games_categories`
        PRIMARY KEY (`game_id`, `category_id`),
        CONSTRAINT `fk_games_categories_games`
        FOREIGN KEY (`game_id`)
        REFERENCES `games`(`id`),
        CONSTRAINT `fk_games_categories_categories`
        FOREIGN KEY (`category_id`)
        REFERENCES `categories`(`id`)
    );
    
    
    -- EX 02 -----------
    
    INSERT INTO `games`(`name`, `rating`, `budget`, `team_id`) 
    SELECT REVERSE(LOWER(SUBSTRING(t.`name`, 2))), t.`id`, t.`leader_id` * 1000, t.`id` FROM `teams` AS t
    WHERE t.`id` BETWEEN 1 AND 9;

    
    -- EX 03 -----------
    
   UPDATE `employees` AS e
   JOIN `teams` AS t
   ON e.`id` = t.`leader_id`
   SET `salary` = `salary` + 1000
   WHERE `age` <= 40 AND `salary` <= 5000 AND e.`id` IN (`leader_id`);
   
   
 -- EX 04 ---------
 DELETE FROM `games` 
 WHERE `id` NOT IN (SELECT `game_id` FROM `games_categories`) AND `release_date` IS NULL;
 
 -- EX 05 --------
 
SELECT `first_name`, `last_name`, `age`, `salary`, `happiness_level` FROM `employees`
ORDER BY `salary`, `id`;
    
    
-- EX 06 --------

SELECT t.`name` AS `team_name`, a.`name` AS `address_name`, CHAR_LENGTH(a.`name`) AS `count_of_characters`
FROM `teams` AS t
JOIN `offices` AS o
ON t.`office_id` = o.`id`
JOIN `addresses` AS a
ON o.`address_id` = a.`id`
WHERE o.`website`  IS NOT NULL
ORDER BY t.`name`, a.`name`;

-- EX 07 --------

SELECT c.`name`, COUNT(c.`name`) AS `games_count`, ROUND(AVG(g.`budget`),2) AS `avg_budget`, MAX(g.`rating`) AS `max_rating`
FROM `categories` AS c
JOIN `games_categories` AS gs
ON c.`id` = gs.`category_id`
JOIN `games` AS g
ON gs.`game_id` = g.`id`
GROUP BY c.`name`
HAVING `max_rating` >= 9.5
ORDER BY `games_count` DESC, c.`name` ASC;

-- EX 08 ----------

SELECT 
    g.`name`,
    g.`release_date`,
    CONCAT(LEFT(g.`description`, 10), '...') AS `summary`,
    (CASE
        WHEN DATE_FORMAT(g.`release_date`, '%M') IN ('January' , 'February', 'March') THEN 'Q1'
        WHEN DATE_FORMAT(g.`release_date`, '%M') IN ('April' , 'May', 'June') THEN 'Q2'
        WHEN DATE_FORMAT(g.`release_date`, '%M') IN ('July' , 'August', 'September') THEN 'Q3'
        WHEN DATE_FORMAT(g.`release_date`, '%M') IN ('October' , 'November', 'December') THEN 'Q4'
    END) AS `quarter`,
    t.`name` AS `team_name`
FROM
    `games` AS g
        JOIN
    `teams` AS t ON `team_id` = t.`id`
WHERE
    DATE_FORMAT(`release_date`, '%c') IN (2 , 4, 6, 8, 10, 12)
        AND RIGHT(g.`name`, 1) = 2
        AND YEAR(`release_date`) = 2022
ORDER BY `quarter`;


-- EX 09 ---------

SELECT 
    g.`name`,
    (CASE
        WHEN g.`budget` < 50000 THEN 'Normal budget'
        ELSE 'Insufficient budget'
    END) AS `budget_level`,
    t.`name` AS `team_name`,
    a.`name` AS `address_name`
FROM
    `games` AS g
        LEFT JOIN
    `teams` AS t ON g.`team_id` = t.`id`
        LEFT JOIN
    `offices` AS o ON t.`office_id` = o.`id`
        LEFT JOIN
    `addresses` AS a ON o.`address_id` = a.`id`
        LEFT JOIN
    `games_categories` AS gc ON g.`id` = gc.`game_id`
WHERE
    g.`id` NOT IN (SELECT 
            `game_id`
        FROM
            `games_categories`)
        AND `release_date` IS NULL
ORDER BY g.`name`;

-- EX 10 ----------

DELIMITER $$

CREATE FUNCTION udf_game_info_by_name (game_name VARCHAR (20)) 
RETURNS TEXT
DETERMINISTIC

BEGIN
	RETURN (SELECT CONCAT('The ', g.`name`, ' is developed by a ', t.`name`, ' in an office with an address ', a.`name`)
		FROM `games` AS g
		JOIN `teams` AS t
		ON g.`team_id` = t.`id`
		JOIN `offices` AS o
		ON t.`office_id` = o.`id`
		JOIN `addresses` AS a
		ON o.`address_id` = a.`id`
		WHERE g.`name` = game_name
);

END $$

DELIMITER ;

SELECT udf_game_info_by_name('Bitwolf') AS info;

-- EX 11 ---------

DELIMITER $$

CREATE PROCEDURE udp_update_budget(min_game_rating FLOAT)
BEGIN
	UPDATE `games` 
    SET `budget` = `budget` + 100000, `release_date` = DATE_ADD(`release_date`, INTERVAL 1 YEAR)
    WHERE `id` NOT IN (SELECT `game_id` FROM `games_categories`) 
    AND `rating` > min_game_rating 
    AND `release_date` IS NOT NULL;


END $$
DELIMITER $$
CALL udp_update_budget (8);


